#!/usr/bin/env python3
"""
Guide d'installation et d'utilisation pour CutLER avec datasets personnalis√©s.
"""

import os
import sys
import subprocess

def main():
    print("=" * 80)
    print("   GUIDE CUTLER - DATASETS PERSONNALIS√âS")
    print("=" * 80)
    print()
    
    print("‚úÖ √âTAPE 1: V√©rification de l'environnement")
    print("-" * 50)
    
    # V√©rifier Python
    python_version = sys.version_info
    print(f"Python: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # V√©rifier CUDA
    try:
        import torch
        cuda_available = torch.cuda.is_available()
        if cuda_available:
            print(f"CUDA: ‚úì Disponible (GPU: {torch.cuda.get_device_name(0)})")
        else:
            print("CUDA: ‚ö†Ô∏è Non disponible (CPU seulement)")
    except ImportError:
        print("PyTorch: ‚ùå Non install√©")
    
    # V√©rifier detectron2
    try:
        import detectron2
        print("Detectron2: ‚úì Install√©")
        detectron2_ok = True
    except ImportError:
        print("Detectron2: ‚ùå Non install√©")
        detectron2_ok = False
    
    print()
    print("‚úÖ √âTAPE 2: Installation (si n√©cessaire)")
    print("-" * 50)
    
    if not detectron2_ok:
        print("Pour installer detectron2:")
        print("1. Avec CUDA (recommand√© si vous avez une GPU):")
        print("   pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu118/torch2.0/index.html")
        print()
        print("2. Version CPU seulement:")
        print("   pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cpu/torch2.0/index.html")
        print()
    
    print("D√©pendances pour la g√©n√©ration de datasets:")
    print("  pip install numpy opencv-python matplotlib Pillow")
    print()
    
    print("‚úÖ √âTAPE 3: Test rapide")
    print("-" * 50)
    print("G√©n√©rer et visualiser un dataset d'exemple:")
    print("  python tools/run_custom_pipeline.py \\")
    print("    --workspace ./test_workspace \\")
    print("    --num-train 20 \\")
    print("    --num-val 5 \\")
    print("    --skip-training")
    print()
    
    print("‚úÖ √âTAPE 4: Utilisation avec votre dataset")
    print("-" * 50)
    print("Structure requise pour votre dataset:")
    print("  mon_dataset/")
    print("  ‚îú‚îÄ‚îÄ images/")
    print("  ‚îÇ   ‚îú‚îÄ‚îÄ train/")
    print("  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ image1.jpg")
    print("  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...")
    print("  ‚îÇ   ‚îî‚îÄ‚îÄ val/")
    print("  ‚îÇ       ‚îî‚îÄ‚îÄ ...")
    print("  ‚îî‚îÄ‚îÄ annotations/")
    print("      ‚îú‚îÄ‚îÄ instances_train.json")
    print("      ‚îî‚îÄ‚îÄ instances_val.json")
    print()
    
    print("Entra√Ænement:")
    print("  python tools/train_custom_simple.py \\")
    print("    --dataset-path ./mon_dataset \\")
    print("    --output-dir ./output \\")
    print("    --num-classes NOMBRE_DE_CLASSES")
    print()
    
    print("Visualisation:")
    print("  python tools/visualize_custom.py \\")
    print("    --dataset-path ./mon_dataset \\")
    print("    --output-dir ./visualizations \\")
    print("    --mode gt")
    print()
    
    print("‚úÖ √âTAPE 5: Fichiers cr√©√©s/modifi√©s")
    print("-" * 50)
    
    files_to_check = [
        "tools/generate_custom_dataset.py",
        "tools/train_custom_simple.py", 
        "tools/visualize_custom.py",
        "tools/run_custom_pipeline.py",
        "cutler/data/datasets/custom_datasets.py",
        "CUSTOM_DATASET_README.md"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"  ‚úì {file_path}")
        else:
            print(f"  ‚ùå {file_path}")
    
    print()
    print("‚úÖ AIDE ET DOCUMENTATION")
    print("-" * 50)
    print("‚Ä¢ README d√©taill√©: CUSTOM_DATASET_README.md")
    print("‚Ä¢ Notebook de d√©monstration: test.ipynb")
    print("‚Ä¢ Format COCO: https://cocodataset.org/#format-data")
    print("‚Ä¢ Documentation CutLER: https://github.com/facebookresearch/CutLER")
    print()
    
    print("‚úÖ PR√äT √Ä UTILISER!")
    print("-" * 50)
    print("Commencez par le test rapide (√©tape 3) pour v√©rifier que tout fonctionne.")
    print()
    
    # Proposer de lancer le test
    response = input("Voulez-vous lancer le test rapide maintenant? [y/N]: ")
    if response.lower() in ['y', 'yes', 'oui']:
        print("\nLancement du test...")
        cmd = [
            sys.executable, "tools/run_custom_pipeline.py",
            "--workspace", "./demo_workspace",
            "--num-train", "5",
            "--num-val", "2",
            "--skip-training"
        ]
        try:
            subprocess.run(cmd, check=True)
            print("\nüéâ Test r√©ussi! Votre environnement est pr√™t.")
        except subprocess.CalledProcessError as e:
            print(f"\n‚ùå Test √©chou√©: {e}")

if __name__ == "__main__":
    main()
